# .github/workflows/ci-cd-pipeline.yml
name: CI/CD Pipeline Modified

on:
  workflow_dispatch:

# prevent overlapping runs on the same branch
concurrency:
  group: ci-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
  PROJECT_ID:    ${{ secrets.GCP_PROJECT }}
  REGION:        ${{ secrets.GCP_REGION }}
  ZONE:          ${{ secrets.GCP_ZONE }}
  VM_NAME:       ${{ secrets.GCP_VM_NAME }}
  REPOSITORY:    my-app
  FRONTEND_PATH: ./frontend
  BACKEND_PATH:  ./backend

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker build layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Build & push frontend image
        id: push-frontend
        run: |
          IMAGE=${REGION}-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:${{ github.sha }}
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $IMAGE $FRONTEND_PATH \
            --push
          echo "::set-output name=image::$IMAGE"

      - name: Build & push backend image
        id: push-backend
        run: |
          IMAGE=${REGION}-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:${{ github.sha }}
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $IMAGE $BACKEND_PATH \
            --push
          echo "::set-output name=image::$IMAGE"

    outputs:
      frontend-image: ${{ steps.push-frontend.outputs.image }}
      backend-image:  ${{ steps.push-backend.outputs.image }}


  deploy:
    name: Provision & Deploy
    needs: build
    runs-on: ubuntu-latest


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Ensure VM exists (with baked-in startup script)
        run: |
          if ! gcloud compute instances describe $VM_NAME --zone=$ZONE >/dev/null 2>&1; then
            gcloud compute instances create $VM_NAME \
              --zone=$ZONE \
              --machine-type=e2-medium \
              --boot-disk-size=30GB \
              --image-family=debian-12 \
              --image-project=debian-cloud \
              --tags=http-server,https-server \
              --service-account=${{ env.SERVICE_ACCOUNT }} \
              --scopes=https://www.googleapis.com/auth/cloud-platform \
              --metadata=startup-script='#! /bin/bash
                apt-get update
                apt-get install -y docker.io docker-compose-plugin
              '
          fi

      - name: Open HTTP/HTTPS firewall (idempotent)
        run: |
          if ! gcloud compute firewall-rules describe allow-http-https --quiet; then
            gcloud compute firewall-rules create allow-http-https \
              --allow tcp:80,tcp:443 \
              --target-tags http-server,https-server \
              --description="Allow HTTP and HTTPS traffic"
          fi
      # - name: Configure Docker to use Artifact Registry
      #   run: |
      #     gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Authenticate Docker on VM to Artifact Registry
        run: |
          gcloud compute ssh $VM_NAME --zone=$ZONE --command "
          gcloud auth configure-docker ${REGION}-docker.pkg.dev
          "
      - name: Render docker-compose.yaml
        run: |
          envsubst < docker-compose.yaml.tpl > docker-compose.yaml

      - name: Copy docker-compose.yaml to VM
        run: |
          gcloud compute scp $GITHUB_WORKSPACE/docker-compose.yaml $VM_NAME:/home/$(whoami)/docker-compose.yaml --zone=$ZONE

      - name: Copy Docker config for root on VM
        run: |
          gcloud compute ssh $VM_NAME --zone=$ZONE --command "
          sudo mkdir -p /root/.docker &&
          sudo cp /home/$(whoami)/.docker/config.json /root/.docker/config.json
          "

      - name: Deploy application on VM
        run: |
          gcloud compute ssh $VM_NAME --zone=$ZONE --command "
          cd /home/$(whoami) &&
          sudo docker compose pull &&
          sudo docker compose down || true &&
          sudo docker compose up -d
          "

      - name: Health check & rollback on failure
        run: |
          gcloud compute ssh $VM_NAME --zone=$ZONE --strict-host-key-checking=no --command "
            if ! curl --fail http://localhost/healthz; then
              echo '❌ Healthcheck failed, rolling back…'
              sudo docker compose down
              exit 1
            fi
          "